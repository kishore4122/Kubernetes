Pre-requisites
**************
	1. update /etc/hosts 
		So that we can talk to each of the nodes in the cluster

		$hostnamect set-hostname kmaster
		$hostnamect set-hostname kworker

		cat >> /etc/hosts << EOF
		192.168.0.1	kmaster.example.com	kmaster
		192.168.0.2 kworker.example.com	kworker
		EOF

	2. Install Docker on Master and Worker

		And set Cgroup drivers to systemcd
			vi /etc/docker/daemon.json
			{
				"exec-opts": ["native.cgroupdriver=systemd"]
			}


			$systemctl enable --now docker
 			$usermod -aG docker ubuntu
 			$systemctl restart docker



	3. Disable SELinux
		$sudo setenforce 0
		$sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

	4. Disable Firewall and Stop Firewall
		$systemctl stop firewalld
		$systemctl disable firewalld

		If firewall is not disabled and stopped then you need to allow these portsin firewall
		ON MANSTER
		----------
			Protocol	Direction	PortRange	Purpose	Used By
			TCP			Inbound		6443		Kubernetes API server	All
			TCP			Inbound		2379-2380	etcd server client API	kube-apiserver, etcd
			TCP			Inbound		10250		Kubelet API	Self, Control plane
			TCP			Inbound		10259		kube-scheduler	Self
			TCP			Inbound		10257		kube-controller-manager	Self

		ON SLAVE
		--------
			Protocol	Direction	PortRange	Purpose	Used By
			TCP			Inbound		10250		Kubelet API	Self, Control plane
			TCP			Inbound		30000-32767	NodePort Servicesâ€ 	All


	5. Disable SWAP
		$sed -i '/swap/d' /etc/fstab
		$swapoff -a

	6. Update sysctl settings for Kubernetes Networking
		Make sure that the "br_netfilter" module is loaded.
			$lsmod | grep br_netfilter
		To Load it explicitly
			$sudo modprobe br_netfilter

			cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
			overlay
			br_netfilter
			EOF

		As a requirement for your Linux Node's iptables to correctly see bridged traffic
			cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
			net.bridge.bridge-nf-call-iptables  = 1
			net.bridge.bridge-nf-call-ip6tables = 1
			net.ipv4.ip_forward                 = 1
			EOF

			$sudo sysctl --system

	7. Kubernetes Setup
		Add yum repository

		cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
		[kubernetes]
		name=Kubernetes
		baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
		enabled=1
		gpgcheck=1
		gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
		exclude=kubelet kubeadm kubectl
		EOF

		$sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

		$sudo systemctl enable --now kubelet

ON MASTER 
----------
1. Start the cluster using Kubeadm init. This will print a join token. Take backup of thattoken
		
		$kubeadm config images pull
			if you get any error then follow these steps
				rm /etc/containerd/config.toml
				systemctl restart containerd		

		$kubeadm init

2. Save the kube config to ubuntu's home directory. Switch to ubuntu or type exit from root mode

		$mkdir -p $HOME/.kube
		$sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config 
		$sudo chown $(id -u):$(id -g) $HOME/.kube/config

		Alternatively, if you are the root user, you can run:
		$export KUBECONFIG=/etc/kubernetes/admin.conf

3. Install any CNI plugin
		https://kubernetes.io/docs/concepts/cluster-administration/addons/

		$kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"


ON WORKER
---------
1. Copy the join token obtained from kubeadm init output to all Workers node and run it. Example
		$kubeadm join \192.168.56.2:6443 --token--discovery-token-ca-cert-hash sha256:....